{
  "name": "childdebugger",
  "displayName": "Child Process Debugger",
  "description": "Auto-attach debugger to child processes for cppvsdbg",
  "author": "Albert Ziegenhagel",
  "publisher": "albertziegenhagel",
  "license": "MIT",
  "version": "1.3.0",
  "homepage": "https://github.com/albertziegenhagel/childdebugger-vscode",
  "bugs": {
    "url": "https://github.com/albertziegenhagel/childdebugger-vscode/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/albertziegenhagel/childdebugger-vscode.git"
  },
  "engines": {
    "vscode": "^1.76.0"
  },
  "categories": [
    "Other"
  ],
  "extensionDependencies": [
    "ms-vscode.cpptools"
  ],
  "activationEvents": [
    "onDebug"
  ],
  "contributes": {
    "configuration": [
      {
        "title": "Child Debugger",
        "properties": {
          "childDebugger.enabled": {
            "order": 0,
            "type": "boolean",
            "default": true,
            "description": "If false, debugging child processes is completely disabled."
          },
          "childDebugger.general.suspendChildren": {
            "order": 1,
            "type": "boolean",
            "default": true,
            "description": "Whether to force a suspended start of the child process. If suspended by the child processes debugger, they will be resumed as soon as the debugger attached successfully."
          },
          "childDebugger.general.suspendParents": {
            "order": 2,
            "type": "boolean",
            "default": true,
            "description": "Whether to suspend the parent process while we are waiting for the debugger to attach to any of its children."
          },
          "childDebugger.general.skipInitialBreakpoint": {
            "order": 3,
            "type": "boolean",
            "default": true,
            "description": "Whether to skip stopping on the \"initial breakpoint\" during the process initialization of the new child process."
          },
          "childDebugger.filter.childProcesses": {
            "order": 4,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "applicationName": {
                  "type": "string",
                  "description": "Matched against the end of the application name (case insensitive)."
                },
                "commandLine": {
                  "type": "string",
                  "description": "Matched against the full command line."
                },
                "attach": {
                  "type": "boolean",
                  "description": "Whether to attach to processes created where both."
                }
              }
            },
            "description": "Allows to filter which processes to attach to."
          },
          "childDebugger.filter.attachOtherChildren": {
            "order": 5,
            "type": "boolean",
            "default": true,
            "description": "Whether to attach to any processes that did not match any of the explicit child process filters."
          },
          "childDebugger.general.logLevel": {
            "order": 6,
            "type": "string",
            "default": "error",
            "enum": [
              "off",
              "error",
              "info",
              "debug",
              "trace"
            ],
            "enumDescriptions": [
              "No log messages will be displayed",
              "Only error messages will be displayed",
              "Informational messages will be displayed",
              "Debug messages will be displayed",
              "All messages will be displayed"
            ],
            "description": "Log level of the debug engine extension. By default only error will be reported."
          }
        }
      }
    ],
    "debuggers": [
      {
        "type": "cppvsdbg",
        "configurationAttributes": {
          "launch": {
            "type": "object",
            "properties": {
              "autoAttachChildProcess": {
                "type": "boolean",
                "description": "Optional parameter. If true, the debugger will automatically (and recursively) attach to child processes of the target process. This is subject to global child process debugging settings which can completely disable child process debugging or specify filters on which processes to attach to.",
                "default": false
              }
            }
          },
          "attach": {
            "type": "object",
            "properties": {
              "autoAttachChildProcess": {
                "type": "boolean",
                "description": "Optional parameter. If true, the debugger will automatically (and recursively) attach to child processes of the target process. This is subject to global child process debugging settings which can completely disable child process debugging or specify filters on which processes to attach to.",
                "default": false
              }
            }
          }
        }
      }
    ]
  },
  "main": "./dist/extension.js",
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "vscode:uninstall": "node ./dist/uninstall.js"
  },
  "devDependencies": {
    "@types/chai": "^4.3.16",
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^18.19.39",
    "@types/vscode": "^1.76.0",
    "@typescript-eslint/eslint-plugin": "7.16",
    "@typescript-eslint/parser": "7.16",
    "@vscode/test-electron": "^2.3.9",
    "chai": "^4.4.1",
    "eslint": "^8.28.0",
    "glob": "^8.1.0",
    "mocha": "^10.8.2",
    "node-loader": "^2.0.0",
    "ts-loader": "^9.4.1",
    "typescript": "^5.5.3",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.0.0"
  }
}